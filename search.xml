<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web3.js编译Solidity</title>
      <link href="/2020/09/04/20200904-web3/"/>
      <url>/2020/09/04/20200904-web3/</url>
      
        <content type="html"><![CDATA[<h1 id="web3-js-编译-Solidity，发布，调用全部流程（手把手教程）"><a href="#web3-js-编译-Solidity，发布，调用全部流程（手把手教程）" class="headerlink" title="web3.js 编译 Solidity，发布，调用全部流程（手把手教程）"></a>web3.js 编译 Solidity，发布，调用全部流程（手把手教程）</h1><p>下面教程是打算在尽量牵涉可能少的以太坊的相关工具，主要使用 web3.js 这个以太坊提供的工具包，来完成合约的编译，发布，合约方法调用的一整个流程。一方面来了解以太坊开发到底需要什么，另一方面来对 web3.js 的 API 有个基本的了解。由于所有其它工具都或多或少的是对 web3.js 的底层函数的包装，所以对 web3.js 使用流程有个认识之后，也能更好的入门，使用相关的工具。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-安装-Node-js"><a href="#1-1-安装-Node-js" class="headerlink" title="1.1 安装 Node.js"></a>1.1 安装 Node.js</h3><p>由于我们要使用 web3.js<a href="https://web3.tryblockchain.org/web3-js-in-action.html#fn1">1</a>。这里使用 Node 来集成 web3.js 模块（当然，你还可以使用其它的方式）。你可以通过参考官网文档安装<a href="https://web3.tryblockchain.org/web3-js-in-action.html#fn2">2</a>。</p><h4 id="1-1-1-Ubuntu"><a href="#1-1-1-Ubuntu" class="headerlink" title="1.1.1 Ubuntu"></a>1.1.1 Ubuntu</h4><p>如果你使用 ubuntu，可以使用下述命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装Node</span></span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line"><span class="comment">//安装Node的包管理器</span></span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><h4 id="1-1-2-MAC"><a href="#1-1-2-MAC" class="headerlink" title="1.1.2 MAC"></a>1.1.2 MAC</h4><p>如果你使用<code>Homebrew</code>，可以使用下述命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装Node</span></span><br><span class="line">brew install node</span><br><span class="line"><span class="comment">//安装Node的包管理器</span></span><br><span class="line">brew install npm</span><br></pre></td></tr></table></figure><h4 id="1-1-3-安装检查"><a href="#1-1-3-安装检查" class="headerlink" title="1.1.3 安装检查"></a>1.1.3 安装检查</h4><p>安装成功后，可以查看下当前的版本，确认正常安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v7<span class="number">.2</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="1-2-以太坊的节点"><a href="#1-2-以太坊的节点" class="headerlink" title="1.2 以太坊的节点"></a>1.2 以太坊的节点</h3><p>由于整个合约代码的执行需要一个虚拟机环境，所以在开始之前，我们不得不安装一个实现了以太坊虚拟机的节点。</p><p>可以选择一个轻量级的节点，比如<code>EtherumJS TestRPC</code>，它是一个完整的在内存中的区块链仅仅存在于你开发的设备上。它在执行交易时是实时返回，而不等待默认的出块时间，这样你可以快速验证你新写的代码，当出现错误时，也能即时反馈给你。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ethereumjs-testrpc</span><br></pre></td></tr></table></figure><p>安装好后，你就可以通过<code>testrpc</code>命令来启动了，启动与大多数以太坊节点一样，运行在<code>localhost:8545</code>。</p><p>如果你安装<code>geth</code>这样的客户端也是可以的。</p><h3 id="1-3-Web3-的支持"><a href="#1-3-Web3-的支持" class="headerlink" title="1.3 Web3 的支持"></a>1.3 Web3 的支持</h3><p>安装<code>web3</code>的模块[web3]：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install web3</span><br></pre></td></tr></table></figure><h2 id="2-合约编译"><a href="#2-合约编译" class="headerlink" title="2. 合约编译"></a>2. 合约编译</h2><h3 id="2-1-一个简单的合约"><a href="#2-1-一个简单的合约" class="headerlink" title="2.1 一个简单的合约"></a>2.1 一个简单的合约</h3><p>我们打算用来测试的合约如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Calc&#123;</span><br><span class="line">  <span class="comment">/*区块链存储*/</span></span><br><span class="line">  uint count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*执行会写入数据，所以需要`transaction`的方式执行。*/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">uint a, uint b</span>) <span class="title">returns</span>(<span class="params">uint</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*执行不会写入数据，所以允许`call`的方式执行。*/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add()</code>方法用来返回输入两个数据的和，并会对<code>add()</code>方法的调用次数进行计数。需要注意的是这个计数是存在区块链上的，对它的调用需要使用<code>transaction</code>。</p><p><code>getCount()</code>返回<code>add()</code>函数的调用次数。由于这个函数不会修改区块链的任何状态，对它的调用使用<code>call</code>就可以了。</p><h3 id="2-2-编译合约"><a href="#2-2-编译合约" class="headerlink" title="2.2 编译合约"></a>2.2 编译合约</h3><p>由于合约是使用<code>Solidity</code>编写，所以我们可以使用<code>web3.eth.compile.solidity</code>来编译合约<a href="https://web3.tryblockchain.org/web3-js-in-action.html#fn3">3</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译合约</span></span><br><span class="line"><span class="keyword">let</span> source = <span class="string">&quot;pragma solidity ^0.4.0;contract Calc&#123;  /*区块链存储*/  uint count;  /*执行会写入数据，所以需要`transaction`的方式执行。*/  function add(uint a, uint b) returns(uint)&#123;    count++;    return a + b;  &#125;  /*执行不会写入数据，所以允许`call`的方式执行。*/  function getCount() returns (uint)&#123;    return count;  &#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calc = web3.eth.compile.solidity(source);</span><br></pre></td></tr></table></figure><p>如果编译成功，结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: <span class="string">&#x27;0x606060405234610000575b607e806100176000396000f3606060405260e060020a6000350463771602f781146026578063a87d942c146048575b6000565b3460005760366004356024356064565b60408051918252519081900360200190f35b3460005760366077565b60408051918252519081900360200190f35b6000805460010190558181015b92915050565b6000545b9056&#x27;</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">        source: <span class="string">&#x27;pragma solidity ^0.4.0;contract Calc&#123;  /*区块链存储*/  uint count;  /*执行会写入数据，所以需要`transaction`的方式执行。*/  function add(uint a, uint b) returns(uint)&#123;    count++;    return a + b;  &#125;  /*执行不会写入数据，所以允许`call`的方式执行。*/  function getCount() returns (uint)&#123;    return count;  &#125;&#125;&#x27;</span>,</span><br><span class="line">        language: <span class="string">&#x27;Solidity&#x27;</span>,</span><br><span class="line">        languageVersion: <span class="string">&#x27;0.4.6+commit.2dabbdf0.Emscripten.clang&#x27;</span>,</span><br><span class="line">        compilerVersion: <span class="string">&#x27;0.4.6+commit.2dabbdf0.Emscripten.clang&#x27;</span>,</span><br><span class="line">        abiDefinition: [</span><br><span class="line">            [</span><br><span class="line">                <span class="built_in">Object</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="built_in">Object</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        userDoc: &#123;</span><br><span class="line">            methods: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        developerDoc: &#123;</span><br><span class="line">            methods: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-发布合约"><a href="#3-发布合约" class="headerlink" title="3. 发布合约"></a>3. 发布合约</h2><p><code>web3.js</code>其实也像框架一样对合约的操作进行了封装。发布合约时，可以使用<code>web3.eth.contract</code>的<code>new</code>方法<a href="https://web3.tryblockchain.org/web3-js-in-action.html#fn4">4</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myContractReturned = calcContract.new(&#123;</span><br><span class="line">    data: deployCode,</span><br><span class="line">    <span class="keyword">from</span>: deployeAddr</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, myContract</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="comment">// 注意：这个回调会触发两次</span></span><br><span class="line">        <span class="comment">//一次是合约的交易哈希属性完成</span></span><br><span class="line">        <span class="comment">//另一次是在某个地址上完成部署</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过判断是否有地址，来确认是第一次调用，还是第二次调用。</span></span><br><span class="line">        <span class="keyword">if</span> (!myContract.address) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;contract deploy transaction hash: &quot;</span> + myContract.transactionHash) <span class="comment">//部署合约的交易哈希值</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合约发布成功</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>部署过程中需要主要的是，<code>new</code>方法的回调会执行两次，第一次是合约的交易创建完成，第二次是在某个地址上完成部署。需要注意的是只有在部署完成后，才能进行方法该用，否则会报错<code>TypeError: myContractReturned.add is not a function</code>。</p><h2 id="4-调用合约"><a href="#4-调用合约" class="headerlink" title="4. 调用合约"></a>4. 调用合约</h2><p>由于<code>web3.js</code>封装了合约调用的方法。我们可以使用可以使用<code>web3.eth.contract</code>的里的<code>sendTransaction</code>来修改区块链数据。在这里有个坑，有可能会出现<code>Error: invalid address</code>，原因是没有传<code>from</code>，交易发起者的地址。在使用<code>web3.js</code>的 API 都需留意，出现这种找不到地址的，都看看<code>from字段吧。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用transaction方式调用，写入到区块链上</span></span><br><span class="line">myContract.add.sendTransaction(<span class="number">1</span>, <span class="number">2</span>, &#123;</span><br><span class="line">  <span class="keyword">from</span>: deployeAddr,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;after contract deploy, call:&quot;</span> + myContract.getCount.call());</span><br></pre></td></tr></table></figure><p>需要注意的是，如果要修改区块链上的数据，一定要使用<code>sendTransaction</code>，这会消耗<code>gas</code>。如果不修改区块链上的数据，使用<code>call</code>，这样不会消耗<code>gas</code>。</p><h2 id="5-使用-web3-js-编译，发布，调用的完整源码"><a href="#5-使用-web3-js-编译，发布，调用的完整源码" class="headerlink" title="5. 使用 web3.js 编译，发布，调用的完整源码"></a>5. 使用 web3.js 编译，发布，调用的完整源码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Web3 = <span class="built_in">require</span>(<span class="string">&quot;web3&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> web3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">&quot;http://localhost:8545&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">from</span> = web3.eth.accounts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译合约</span></span><br><span class="line"><span class="keyword">let</span> source = <span class="string">&quot;pragma solidity ^0.4.0;contract Calc&#123;  /*区块链存储*/  uint count;  /*执行会写入数据，所以需要`transaction`的方式执行。*/  function add(uint a, uint b) returns(uint)&#123;    count++;    return a + b;  &#125;  /*执行不会写入数据，所以允许`call`的方式执行。*/  function getCount() constant returns (uint)&#123;    return count;  &#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> calcCompiled = web3.eth.compile.solidity(source);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calcCompiled);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ABI definition:&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(calcCompiled[<span class="string">&quot;info&quot;</span>][<span class="string">&quot;abiDefinition&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到合约对象</span></span><br><span class="line"><span class="keyword">let</span> abiDefinition = calcCompiled[<span class="string">&quot;info&quot;</span>][<span class="string">&quot;abiDefinition&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> calcContract = web3.eth.contract(abiDefinition);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 部署合约</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.1 获取合约的代码，部署时传递的就是合约编译后的二进制码</span></span><br><span class="line"><span class="keyword">let</span> deployCode = calcCompiled[<span class="string">&quot;code&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 部署者的地址，当前取默认账户的第一个地址。</span></span><br><span class="line"><span class="keyword">let</span> deployeAddr = web3.eth.accounts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3 异步方式，部署合约</span></span><br><span class="line"><span class="keyword">let</span> myContractReturned = calcContract.new(</span><br><span class="line">  &#123;</span><br><span class="line">    data: deployCode,</span><br><span class="line">    <span class="keyword">from</span>: deployeAddr,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, myContract</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="comment">// 注意：这个回调会触发两次</span></span><br><span class="line">      <span class="comment">//一次是合约的交易哈希属性完成</span></span><br><span class="line">      <span class="comment">//另一次是在某个地址上完成部署</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过判断是否有地址，来确认是第一次调用，还是第二次调用。</span></span><br><span class="line">      <span class="keyword">if</span> (!myContract.address) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;contract deploy transaction hash: &quot;</span> + myContract.transactionHash); <span class="comment">//部署合约的交易哈希值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合约发布成功后，才能调用后续的方法</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;contract deploy address: &quot;</span> + myContract.address); <span class="comment">// 合约的部署地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用transaction方式调用，写入到区块链上</span></span><br><span class="line">        myContract.add.sendTransaction(<span class="number">1</span>, <span class="number">2</span>, &#123;</span><br><span class="line">          <span class="keyword">from</span>: deployeAddr,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;after contract deploy, call:&quot;</span> + myContract.getCount.call());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 函数返回对象`myContractReturned`和回调函数对象`myContract`是 &quot;myContractReturned&quot; === &quot;myContract&quot;,</span></span><br><span class="line">      <span class="comment">// 所以最终`myContractReturned`这个对象里面的合约地址属性也会被设置。</span></span><br><span class="line">      <span class="comment">// `myContractReturned`一开始返回的结果是没有设置的。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，异步执行，此时还是没有地址的。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;returned deployed didn&#x27;t have address now: &quot;</span> + myContractReturned.address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用非回调的方式来拿到返回的地址，但你需要等待一段时间，直到有地址，建议使用上面的回调方式。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">  console.log(&quot;returned deployed wait to have address: &quot; + myContractReturned.address);</span></span><br><span class="line"><span class="comment">  console.log(myContractReturned.getCount.call());</span></span><br><span class="line"><span class="comment">&#125;, 20000);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你在其它地方已经部署了合约，你可以使用at来拿到合约对象</span></span><br><span class="line"><span class="comment">//calcContract.at([&quot;0x50023f33f3a58adc2469fc46e67966b01d9105c4&quot;]);</span></span><br></pre></td></tr></table></figure><p><a href="https://me.tryblockchain.org/">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 以太坊 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序错误统计</title>
      <link href="/2020/09/03/20200903-feishu-bug-collection/"/>
      <url>/2020/09/03/20200903-feishu-bug-collection/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>解决线上报错难以归类、查找的问题，根据每位同学负责的项目的不同，单独分类并解决 bug，提升用户体验，以及小程序的评分等；</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>抓取微信后台报错=&gt;根据不同的人负责项目的不同分别统计=&gt;生成 excel=&gt;上传到飞书文档</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>node（superagent、xlsx）+ 飞书文档</p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul><li>首先登陆<a href="https://mp.weixin.qq.com/">微信公众平台</a>中的开发一栏；</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img1.png"></p><ul><li>选择页面里面的运维中心=&gt;错误查询选项；</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img2.png"></p><ul><li>页面长这样，我们可以选择里面日期，版本，类型等条件进行查询；</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img3.png"></p><ul><li>然后打开 chrome 的控制台，点击查询按钮, 我们可以看到请求了一个接口，这个接口微信用于查询错误的接口了，也是我们要用的接口</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img4.png"></p><p><img src="/assets/20200903-feishu-bug-collection/img5.png"></p><p><img src="/assets/20200903-feishu-bug-collection/img6.png"></p><ul><li>下面我们要做的就是把上边所有的请求头参数粘贴出来拟微信请求了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">&quot;superagent&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configs = &#123;</span><br><span class="line">  Accept: <span class="string">&quot;application/json, text/plain,&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">  Connection: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;96&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  Cookie: <span class="string">&quot;xxxxxxxxxxx&quot;</span>,</span><br><span class="line">  Host: <span class="string">&quot;mp.weixin.qq.com&quot;</span>,</span><br><span class="line">  Origin: <span class="string">&quot;https://mp.weixin.qq.com&quot;</span>,</span><br><span class="line">  Referer: <span class="string">&quot;https://mp.weixin.qq.com/wxamp/wxaalarm/get_jserr?token=730361255&amp;lang=zh_CN&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">runBug</span>(<span class="params">pageNum = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> superagent</span><br><span class="line">    .post(<span class="string">`https://mp.weixin.qq.com/wxamp/cgi/route?path=xxx&amp;token=xxx&amp;lang=zh_CN&amp;random=<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>)</span><br><span class="line">    <span class="comment">// 请求所携带的参数</span></span><br><span class="line">    <span class="comment">// start_time 开始时间</span></span><br><span class="line">    <span class="comment">// end_time 结束时间</span></span><br><span class="line">    <span class="comment">// start 页数时间</span></span><br><span class="line">    <span class="comment">// limit 每页条数</span></span><br><span class="line">    .send(&#123; <span class="attr">errmsg_keyword</span>: <span class="string">&quot;&quot;</span>, <span class="attr">type</span>: <span class="number">1</span>, <span class="attr">client_version</span>: <span class="string">&quot;&quot;</span>, <span class="attr">start_time</span>: process.argv[<span class="number">2</span>], <span class="attr">end_time</span>: process.argv[<span class="number">3</span>], <span class="attr">start</span>: pageNum, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</span><br><span class="line">    .set(<span class="string">&quot;Cookie&quot;</span>, configs[<span class="string">&quot;Cookie&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Host&quot;</span>, configs[<span class="string">&quot;Host&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Origin&quot;</span>, configs[<span class="string">&quot;Origin&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Sec-Fetch-Dest&quot;</span>, configs[<span class="string">&quot;Sec-Fetch-Dest&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Sec-Fetch-Mode&quot;</span>, configs[<span class="string">&quot;Sec-Fetch-Mode&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Sec-Fetch-Site&quot;</span>, configs[<span class="string">&quot;Sec-Fetch-Site&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;User-Agent&quot;</span>, configs[<span class="string">&quot;User-Agent&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Accept&quot;</span>, configs[<span class="string">&quot;Accept&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Accept-Encoding&quot;</span>, configs[<span class="string">&quot;Accept-Encoding&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Accept-Language&quot;</span>, configs[<span class="string">&quot;Accept-Language&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Connection&quot;</span>, configs[<span class="string">&quot;Connection&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Content-Length&quot;</span>, configs[<span class="string">&quot;Content-Length&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Content-Type&quot;</span>, configs[<span class="string">&quot;Content-Type&quot;</span>])</span><br><span class="line">    .set(<span class="string">&quot;Referer&quot;</span>, configs[<span class="string">&quot;Referer&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后可以看到接口请求成功了！</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img7.png"></p><ul><li>接下来要做的就是根据每位同学负责的项目单独查找报错信息，并生成 excel（每位同学一个 sheet,如果某个报错不属于任何一个人的话，直接放到其他中）,这里就使用到了<a href="https://www.npmjs.com/package/xlsx">xlsx</a>了，根绝</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> XLSX = <span class="built_in">require</span>(<span class="string">&quot;xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//excel里的sheet第一行</span></span><br><span class="line"><span class="keyword">const</span> basic = [<span class="string">&quot;时间&quot;</span>, <span class="string">&quot;客户端版本&quot;</span>, <span class="string">&quot;小程序版本&quot;</span>, <span class="string">&quot;版本错误次数&quot;</span>, <span class="string">&quot;总错误次数&quot;</span>, <span class="string">&quot;错误内容&quot;</span>, <span class="string">&quot;备注（有特殊情况的，说明具体原因！）&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    pages: [<span class="string">&quot;pages/a1&quot;</span>, <span class="string">&quot;pages/a2&quot;</span>], <span class="comment">// 页面路由</span></span><br><span class="line">    result: [basic], <span class="comment">// 匹配集合</span></span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    pages: [<span class="string">&quot;pages/b1&quot;</span>, <span class="string">&quot;pages/b2&quot;</span>],</span><br><span class="line">    result: [basic]</span><br><span class="line">  &#125;</span><br><span class="line">  其他: &#123; <span class="attr">result</span>: [basic] &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">runBug</span>(<span class="params">pageNum = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = 接口返回的数据</span><br><span class="line">  <span class="keyword">if</span> (res.body.results &amp;&amp; res.body.results.length) &#123;</span><br><span class="line">    <span class="comment">// 遍历报错信息集合</span></span><br><span class="line">    results: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.body.results.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 遍历成员集合</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> w = <span class="number">0</span>; w &lt; memberKey.length - <span class="number">1</span>; w++) &#123;</span><br><span class="line">        <span class="comment">// 遍历成员的路由</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; member[memberKey[w]].pages.length; v++) &#123;</span><br><span class="line">          <span class="comment">// 判断报错信息与成员负责的页面路由是否匹配</span></span><br><span class="line">          <span class="keyword">if</span> (res.body.results[i].errmsg.indexOf(member[memberKey[w]].pages[v]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            member[memberKey[w]].result.push([format(res.body.results[i].time), res.body.results[i].client_version, res.body.results[i].app_version, res.body.results[i].version_error_cnt, res.body.results[i].total_error_cnt, res.body.results[i].errmsg]);</span><br><span class="line">            <span class="keyword">continue</span> results;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没有匹配上任何成员的路由，则默认放到“其他”sheet下面，统一管理</span></span><br><span class="line">      member[<span class="string">&quot;其他&quot;</span>].result.push([format(res.body.results[i].time), res.body.results[i].client_version, res.body.results[i].app_version, res.body.results[i].version_error_cnt, res.body.results[i].total_error_cnt, res.body.results[i].errmsg], <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    runBug(++pageNum); <span class="comment">// 当前页面查询完毕，接着查询下一页，直到没有内容位置</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> wb = XLSX.utils.book_new();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; memberKey.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> ws = XLSX.utils.aoa_to_sheet(member[memberKey[i]].result);</span><br><span class="line">        XLSX.utils.book_append_sheet(wb, ws, memberKey[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> XLSX.writeFile(wb, <span class="string">`<span class="subst">$&#123;format(+process.argv[<span class="number">2</span>]) + <span class="string">&quot;-&quot;</span> + format(+process.argv[<span class="number">3</span>]) + <span class="string">&quot;错误统计&quot;</span>&#125;</span>.xlsx`</span>); <span class="comment">// 生成excel文件到当前目录中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后我们打开 excel，这就是我们想要的</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img8.png"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>目前的开发设计在本地，发给每个人去更改，然后在反馈统计，显然是不太合理;我想要的是多人在线协作更改，实时反馈，目前有两个解决方案；<ul><li><u> 1、通过飞书开放平台提供的<a href="https://open.f.mioffice.cn/document/ukTMukTMukTM/uADN14CM0UjLwQTN">api</a>上传(不过目前公司搭建的飞书服务这个方法不能使用了，我也不知道为啥~~) </u></li><li><u> 2、通过飞书客户端手动上传，此方法简单直接点击选择就行了 </u></li></ul></li></ul><p><img src="/assets/20200903-feishu-bug-collection/img9.png"></p><p><img src="/assets/20200903-feishu-bug-collection/img10.png"></p><ul><li>上传后，结构是乱的，我们需要手动转为在线表格才行</li></ul><p><img src="/assets/20200903-feishu-bug-collection/img11.png"></p><ul><li>这样就是我们最终想要的最终结果啦<del>~</del></li></ul><p><img src="/assets/20200903-feishu-bug-collection/img12.png"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 飞书文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞书机器人--前端文章推送</title>
      <link href="/2020/09/02/20200902-feishu-robot/"/>
      <url>/2020/09/02/20200902-feishu-robot/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>每日推送新鲜的前端学习资料，供大家阅读、学习等；</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>node（superagent、cheerio 等）+ 腾讯云云函数</p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><em>注：如果是自己公司搭建的飞书私服的话，则需要按照私服的文档进行开发即可</em></p><ul><li>进入飞书开发平台<a href="https://open.feishu.cn/">我的应用</a>中申请注册一个 APP，然后系统会给分配一个 appid 以及 appsecret 用于后续校验、认证逻辑；</li></ul><p><img src="/assets/20200902-robot/img1.png"></p><ul><li>在飞书群聊中添加所创建的机器人；</li></ul><p><img src="/assets/20200902-robot/img2.png"></p><ul><li>打开飞书开发平台<a href="https://open.feishu.cn/document/ukTMukTMukTM/uIjNz4iM2MjLyYzM">服务端 API</a>，去获取应用的 tenant_access_token，用作 APP 的认证标识(所有请求都需要此标识作为认证依据)；</li></ul><p><img src="/assets/20200902-robot/img3.png"></p><ul><li>获取所有添加机器人的群列表，用于指定群发送信息；</li></ul><p><img src="/assets/20200902-robot/img4.png"></p><ul><li>准备工作完成后，可以开始发送消息推送了，我这边选择的是发送富文本消息的模式，因为发送种类多，功能强大；</li></ul><p><img src="/assets/20200902-robot/img5.png"></p><ul><li>发送到群里的消息大致长这样：因为目前是测试，不是真实数据，下面会用到真实数据；</li></ul><p><img src="/assets/20200902-robot/img6.png"></p><h2 id="爬虫（接口、页面）"><a href="#爬虫（接口、页面）" class="headerlink" title="爬虫（接口、页面）"></a>爬虫（接口、页面）</h2><p>上面已经实现了消息的推送，但是数据是假的，日常工作中我们肯定想要阅读高质量、标准的文章，所以要拿到好的数据源，这边选择的是<a href="https://web-api.juejin.im/query">掘金的 API</a>作为数据源；使用<a href="https://www.npmjs.com/package/superagent">superagent</a>爬取接口数据，使用<a href="https://www.npmjs.com/package/cheerio">cheerio</a>爬取页面数据，最终展示的效果为：</p><p><img src="/assets/20200902-robot/img7.png"></p><p><img src="/assets/20200902-robot/img8.png"></p><h2 id="部署（腾讯云云函数）"><a href="#部署（腾讯云云函数）" class="headerlink" title="部署（腾讯云云函数）"></a>部署（腾讯云云函数）</h2><p><u>目前代码只是运行在本地，这样肯定不行，需要跑在服务器中，而且我的需求是每天早晚需要推送一次，这就要用到定时任务了，所以我这边选择了腾讯云云函数部署，依托了腾讯云，我们只需要关注代码的开发，方便、快捷且收费很便宜;</u></p><p><img src="/assets/20200902-robot/img9.png"></p><p><img src="/assets/20200902-robot/img10.png"></p><ul><li>我这边选择的是 node8.9、空白模板，当然也可以选择更高的版本以及不同语言的模板函数；</li></ul><p><img src="/assets/20200902-robot/img11.png"></p><p><img src="/assets/20200902-robot/img12.png"></p><ul><li>传建完成后：</li></ul><p><img src="/assets/20200902-robot/img13.png"></p><ul><li>我们可以在线编辑代码或者选择 zip 上传代码：</li></ul><p><img src="/assets/20200902-robot/img14.png"></p><p><u>注：这边需要注意的是我们的代码执行逻辑必须包含在 index.main_handler 这个函数中（当然也可以自定义函数名哈），且最后执行的结果必须返回一个 promise 对象，不然云函数不能识别；</u></p><ul><li><p>上传完后点击保存，就搞定了；</p></li><li><p>最后点击触发信息添加定时任务</p></li></ul><p><img src="/assets/20200902-robot/img15.png"></p><ul><li>我选择的是自定义触发任务，因为我想 9 点半触发一次，定时任务的语法使用的是 cron 表达式，最后点击提交即可；</li></ul><p><img src="/assets/20200902-robot/img16.png"></p><p><img src="/assets/20200902-robot/img17.png"></p><p>可以看到每天 9 点半准时推送了！</p><p><img src="/assets/20200902-robot/img18.png"></p><p>到此我们的开发就完成了！</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>除了上述通过调用接口的方式发送推送外，飞书还提供了 Webhook（网络钩子）的方式发送推送，不过功能过于单一，不太好用；</p><p><img src="/assets/20200902-robot/img19.png"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> serverless </tag>
            
            <tag> serverless（云函数） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Composition API 陷阱</title>
      <link href="/2020/09/01/20200901-Composition-API/"/>
      <url>/2020/09/01/20200901-Composition-API/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从 React Hooks 出现之后，批评的声音不断，很多人说它带来了心智负担，因为相比传统的 Class 写法，useState/useEffect 的依赖于执行顺序的特点让人捉摸不透。与此相对的，在 Vue3 Composition API RFC 中，我们看到 Vue3 官方描述 CompositionAPI 是一个基于已有的”响应式”心智模型的更好方案，这让我们觉得好像不需要任何心智模型的切换就可以迅速投入到 Compositoin API 的开发中去。但在我尝试了一段时间后，发现事实并非如此，我们依然需要一些思维上的变化来适应新的 Compsition API。</p><h2 id="Setup-陷阱"><a href="#Setup-陷阱" class="headerlink" title="Setup 陷阱"></a>Setup 陷阱</h2><h3 id="简单陷阱"><a href="#简单陷阱" class="headerlink" title="简单陷阱"></a>简单陷阱</h3><p>先看一个 Vue2 简单例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;addCount&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     count: <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">   addCount() &#123;</span><br><span class="line">     <span class="built_in">this</span>.count += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在 Vue2 的心智模型中，我们总会在 data 中返回一个对象，我们并不关心对象的值是简单类型还是引用类型，因为它们都能很好的被响应式系统处理，就像上面这个例子一样。但是，如果我们不作任何心智模型的变化，就开始使用 Composition API，我们就容易写出这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   &#123;&#123;count&#125;&#125;</span><br><span class="line">   &lt;button @click=<span class="string">&quot;addCount&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">     count: <span class="number">0</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     data.count += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     count: data.count,</span><br><span class="line">     addCount</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;; &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>实际上，这段代码不能正常运作，当你点击 button 时，视图不会响应数据变化。原因是，我们先将 data 中的 count 取了出来，再合并到 this.$data 中，但是一旦 count 被取出来，它就是一个单纯的简单类型数据，响应式就丢了。</p><h3 id="复杂陷阱"><a href="#复杂陷阱" class="headerlink" title="复杂陷阱"></a>复杂陷阱</h3><p>数据结构越复杂，我们就越容易落入陷阱，在这里我们把一段业务逻辑抽离到自定义 hooks 里，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">   userInfo: &#123;</span><br><span class="line">     name: <span class="string">&#x27;default_name&#x27;</span>,</span><br><span class="line">     role: <span class="string">&#x27;default_role&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   projectList: []</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 异步获取数据</span></span><br><span class="line">   fetch(...).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; userInfo, projectList &#125; = result</span><br><span class="line">     data.userInfo = userInfo</span><br><span class="line">     data.projectList = projectList</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后像往常一样，我们在业务组件中去使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &#123;&#123;name&#125;&#125;</span><br><span class="line">   &#123;&#123;role&#125;&#125;</span><br><span class="line">   &#123;&#123;list&#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; <span class="keyword">import</span> useSomeData <span class="keyword">from</span> <span class="string">&#x27;./useSomeData&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; userInfo, projectList &#125; = useSomeData()</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     name: userInfo.name <span class="comment">// 响应式断掉</span></span><br><span class="line">     role: userInfo.role, <span class="comment">// 响应式断掉</span></span><br><span class="line">     list: projectList <span class="comment">// 响应式还是断掉</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们看到，不管我们从响应式数据里取出什么（简单类型 or 引用类型），都会导致响应式断掉，进而无法更新视图。</p><p>所有这些问题的根源都是：<strong>setup 只会执行一次。</strong></p><h2 id="迁移到新的心智模型"><a href="#迁移到新的心智模型" class="headerlink" title="迁移到新的心智模型"></a>迁移到新的心智模型</h2><ol><li>时刻记住 setup 只会执行一次</li><li>永远不要直接使用简单类型</li><li>解构可能有风险，优先使用引用本身，而不是解构它</li><li>可以通过一些手段让解构变得安全</li></ol><h3 id="使用新心智模型来解决问题"><a href="#使用新心智模型来解决问题" class="headerlink" title="使用新心智模型来解决问题"></a>使用新心智模型来解决问题</h3><p>简单陷阱：永远不要直接使用简单类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   &#123;&#123;count&#125;&#125;</span><br><span class="line">   &lt;button @click=<span class="string">&quot;addCount&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; <span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> count = ref(<span class="number">0</span>) <span class="comment">// 在这里使用ref包裹一层引用容器</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     count.value += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     count,</span><br><span class="line">     addCount</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;; &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>复杂陷阱-方案 1：解构可能有风险，优先使用引用本身，而不是解构它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &#123;&#123;someData.userInfo.name&#125;&#125;</span><br><span class="line">   &#123;&#123;someData.userInfo.role&#125;&#125;</span><br><span class="line">   &#123;&#123;someData.projectList&#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; <span class="keyword">import</span> useSomeData <span class="keyword">from</span> <span class="string">&#x27;./useSomeData&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> someData = useSomeData()</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     someData</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>复杂陷阱-方案 2：可以通过 computed 让解构变得安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">   userInfo: &#123;</span><br><span class="line">     name: <span class="string">&#x27;default_user&#x27;</span>,</span><br><span class="line">     role: <span class="string">&#x27;default_role&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   projectList: []</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 异步获取数据</span></span><br><span class="line">   fetch(...).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; userInfo, projectList &#125; = result</span><br><span class="line">     data.userInfo = userInfo</span><br><span class="line">     data.projectList = projectList</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> userName = computed(<span class="function">() =&gt;</span> data.userInfo.name)</span><br><span class="line"> <span class="keyword">const</span> userRole = computed(<span class="function">() =&gt;</span> data.userinfo.role)</span><br><span class="line"> <span class="keyword">const</span> projectList = computed(<span class="function">() =&gt;</span> data.projectList)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">   userName,</span><br><span class="line">   userRole,</span><br><span class="line">   projectList</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; userName, userRole, projectList &#125; = useSomeData()</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     name: userName <span class="comment">// 是计算属性，响应式不会断掉</span></span><br><span class="line">     role: userRole, <span class="comment">// 是计算属性，响应式不会断掉</span></span><br><span class="line">     list: projectList <span class="comment">// 是计算属性，响应式不会断掉</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂陷阱-方案 3：方案 2 需要额外写一些 computed 属性，比较麻烦，我们还可以通过 toRefs 让解构变得安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">   userInfo: &#123;</span><br><span class="line">     name: <span class="string">&#x27;default_user&#x27;</span>,</span><br><span class="line">     role: <span class="string">&#x27;default_role&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   projectList: []</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 异步获取数据</span></span><br><span class="line">   fetch(...).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; userInfo, projectList &#125; = result</span><br><span class="line">     data.userInfo = userInfo</span><br><span class="line">     data.projectList = projectList</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 使用toRefs</span></span><br><span class="line"> <span class="keyword">return</span> toRefs(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 现在userInfo和projectList都已经被ref包裹了一层</span></span><br><span class="line">    <span class="comment">// 这层包裹会在template中自动解开</span></span><br><span class="line">    <span class="keyword">const</span> &#123; userInfo, projectList &#125; = useSomeData();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: userInfo.value.name, <span class="comment">// ???好了吗</span></span><br><span class="line">      role: userInfo.value.role, <span class="comment">// ???好了吗</span></span><br><span class="line">      list: projectList, <span class="comment">// ???好了吗</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你以为这样就好了吗？其实这里有一个<strong>陷阱中的陷阱</strong>：projectList 好了，但是 name 和 role 依然是响应式断开的状态，因为 toRefs 只会”浅“包裹，实际上 useSomeData 返回的结果是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someData = useSomeData()</span><br><span class="line">↓</span><br><span class="line">&#123;</span><br><span class="line"> userInfo: &#123;</span><br><span class="line">   value: &#123;</span><br><span class="line">     name: <span class="string">&#x27;...&#x27;</span>, <span class="comment">// 依然是简单类型，没有被包裹</span></span><br><span class="line">     role: <span class="string">&#x27;...&#x27;</span> <span class="comment">// 依然是简单类型，没有被包裹</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> projectList: &#123;</span><br><span class="line">   value: [...]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们的 useSomeData 如果想要通过 toRefs 实现真正的解构安全，需要这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="comment">// 让每一层级都套一层ref</span></span><br><span class="line"> <span class="keyword">return</span> toRefs(&#123;</span><br><span class="line">   projectList: data.projectList,</span><br><span class="line">   userInfo: toRefs(data.userInfo)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建议：使用自定义 hooks 返回数据的时候，如果数据的层级比较简单，可以直接使用 toRefs 包裹；如果数据的层级比较复杂，建议使用 computed。</p></blockquote><h2 id="绕过陷阱"><a href="#绕过陷阱" class="headerlink" title="绕过陷阱"></a>绕过陷阱</h2><p>上述操作其实是 Vue 官方使用 CompositionAPI 的标准方式，因为 CompositionAPI 完全就是按照 setup 只会执行一次进行设计的。但是不可否认的是，这的确带来了许多心智负担，因为我们不得不时刻关注响应式数据到底能不能解构，不然一不小心就容易调到坑里。</p><p>其实所有这些问题都出在 setup 只会执行一次，那么有没有办法解决呢？有的，可以使用 JSX 或 h 的写法，绕过 setup 只会执行一次的问题：</p><p>还是这个存在安全隐患的自定义 hooks：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">   userInfo: &#123;</span><br><span class="line">     name: <span class="string">&#x27;default_name&#x27;</span>,</span><br><span class="line">     role: <span class="string">&#x27;default_role&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   projectList: []</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 异步获取数据</span></span><br><span class="line">   fetch(...).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; userInfo, projectList &#125; = result</span><br><span class="line">     data.userInfo = userInfo</span><br><span class="line">     data.projectList = projectList</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-JSX-或-h"><a href="#使用-JSX-或-h" class="headerlink" title="使用 JSX 或 h"></a>使用 JSX 或 h</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSomeData <span class="keyword">from</span> <span class="string">&quot;./useSomeData&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> someData = useSomeData();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        userInfo: &#123; name, role &#125;,</span><br><span class="line">        projectList,</span><br><span class="line">      &#125; = someData;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;name&#125;</span><br><span class="line">          &#123;role&#125;</span><br><span class="line">          &#123;projectList&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在使用 JSX 或 h 的时候，setup 需要返回一个函数，这个函数其实就是 render 函数，它在数据变化时会重新执行，所以我们只需要把解构的逻辑放到 render 函数里，那么就解决了 setup 只会执行一次的问题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我们可能需要一些约定，来约束自定义 hooks 的使用方式。但是官方并没有给出，这将导致我们 hooks 会写的五花八门，并且漏洞百出。目前来看，”不要解构“是最安全的方式。</p><p>我专门就这个问题请教了 yyx 大佬，大佬给出了一个”约定”，那就是尽量少使用“解构”。这我也很无奈。其实我是希望官方能够给出一个工具，让我们减少在自定义 hooks 中犯错误的可能性。（toRefs 其实就是这样的一个工具，但是它并不能解决所有问题）</p><p><a href="https://juejin.im/post/6855473771013226503">原文连接</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> Compsition API </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
